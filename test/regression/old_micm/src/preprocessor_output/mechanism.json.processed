{
    "factor_solve_utilities_module": "module factor_solve_utilities\n\nuse ccpp_kinds, only: r8 => kind_phys \n\n! This code was generated by Preprocessor revision ce294990b2b7c0fca7ccd104c7c4edb76362549a\n! Preprocessor source https://github.com/NCAR/MechanismToCode\n\n! This code is generated from tag 272 of the mechanism, Chapman.  It is named Chapman with MICM_j\n! This tag was created on 2020-02-25 14:07:46.204967-07 by ajc and is marked as not buggy\n\n  implicit none\n\n  integer, parameter :: number_sparse_factor_elements = 19\n\n  public :: factor, solve \n\n  contains\n\n\nsubroutine backsolve_L_y_eq_b(LU,b,y)\n\n\n  real(r8), intent(in) :: LU(:)\n  real(r8), intent(in) :: b(:)\n  real(r8), intent(out) :: y(:)\n\n\n  y(1) = b(1)\n  y(2) = b(2)\n  y(3) = b(3)\n  y(4) = b(4)\n  y(5) = b(5)\n  y(5) = y(5) - LU(5) * y(4)\n  y(6) = b(6)\n  y(6) = y(6) - LU(6) * y(4)\n  y(6) = y(6) - LU(8) * y(5)\n  y(7) = b(7)\n  y(7) = y(7) - LU(10) * y(6)\n  y(8) = b(8)\n  y(8) = y(8) - LU(11) * y(6)\n  y(8) = y(8) - LU(15) * y(7)\n\n\nend subroutine backsolve_L_y_eq_b\n\n\n\nsubroutine backsolve_U_x_eq_y(LU,y,x)\n\n\n  real(r8), intent(in) :: LU(:)\n  real(r8), intent(in) :: y(:)\n  real(r8), intent(out) :: x(:)\n  real(r8) :: temporary\n\n\n  temporary = y(8)\n  x(8) = LU(19) * temporary\n  temporary = y(7)\n  temporary = temporary - LU(18) * x(8)\n  x(7) = LU(14) * temporary\n  temporary = y(6)\n  temporary = temporary - LU(13) * x(7)\n  temporary = temporary - LU(17) * x(8)\n  x(6) = LU(9) * temporary\n  temporary = y(5)\n  temporary = temporary - LU(12) * x(7)\n  temporary = temporary - LU(16) * x(8)\n  x(5) = LU(7) * temporary\n  temporary = y(4)\n  x(4) = LU(4) * temporary\n  temporary = y(3)\n  x(3) = LU(3) * temporary\n  temporary = y(2)\n  x(2) = LU(2) * temporary\n  temporary = y(1)\n  x(1) = LU(1) * temporary\n\n\nend subroutine backsolve_U_x_eq_y\n\nsubroutine factor(LU)\n\n\n  real(r8), intent(inout) :: LU(:)\n\n\n  LU(1) = 1./LU(1)\n  LU(2) = 1./LU(2)\n  LU(3) = 1./LU(3)\n  LU(4) = 1./LU(4)\n  LU(5) = LU(5) * LU(4)\n  LU(6) = LU(6) * LU(4)\n  LU(7) = 1./LU(7)\n  LU(8) = LU(8) * LU(7)\n  LU(13) = LU(13) - LU(8)*LU(12)\n  LU(17) = LU(17) - LU(8)*LU(16)\n  LU(9) = 1./LU(9)\n  LU(10) = LU(10) * LU(9)\n  LU(11) = LU(11) * LU(9)\n  LU(14) = LU(14) - LU(10)*LU(13)\n  LU(15) = LU(15) - LU(11)*LU(13)\n  LU(18) = LU(18) - LU(10)*LU(17)\n  LU(19) = LU(19) - LU(11)*LU(17)\n  LU(14) = 1./LU(14)\n  LU(15) = LU(15) * LU(14)\n  LU(19) = LU(19) - LU(15)*LU(18)\n  LU(19) = 1./LU(19)\n\n\nend subroutine factor\n\nsubroutine solve(LU, x, b) \n\n  real(r8), intent(in) :: LU(:), b(:) ! solve LU * x = b \n  real(r8), intent(out) :: x(:) \n  real(r8) :: y(size(b)) \n\n  call backsolve_L_y_eq_b(LU, b, y)\n  call backsolve_U_x_eq_y(LU, y, x)\n\nend subroutine solve \n\n\nend module factor_solve_utilities\n",
    "j_labels": [
        {
            "photodecompositionDescription": "j_O2_1: O2 -> 2*O",
            "simulationIndex": 0
        },
        {
            "photodecompositionDescription": "j_O3_1: O3 -> 1*O1D + 1*O2",
            "simulationIndex": 1
        },
        {
            "photodecompositionDescription": "j_O3_2: O3 -> 1*O + 1*O2",
            "simulationIndex": 2
        }
    ],
    "k_labels": [
        {
            "kRateDescription": "k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2",
            "simulationIndex": 1
        },
        {
            "kRateDescription": "k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2",
            "simulationIndex": 2
        },
        {
            "kRateDescription": "k_O_O3_1: O + O3 -> 2*O2",
            "simulationIndex": 3
        },
        {
            "kRateDescription": "k_O_O2_M_1: M, O + O2 -> 1*O3",
            "simulationIndex": 4
        }
    ],
    "kinetics_utilities_module": "module kinetics_utilities\nuse ccpp_kinds, only: r8 => kind_phys\n\n! This code was generated by Preprocessor revision ce294990b2b7c0fca7ccd104c7c4edb76362549a\n! Preprocessor source https://github.com/NCAR/MechanismToCode\n\n! This code is generated from tag 272 of the mechanism, Chapman.  It is named Chapman with MICM_j\n! This tag was created on 2020-02-25 14:07:46.204967-07 by ajc and is marked as not buggy\n\n  use factor_solve_utilities, only:  factor \n\n  implicit none\n\n  private\n  public :: dforce_dy_times_vector, factored_alpha_minus_jac, p_force, reaction_rates, reaction_names, &\n            dforce_dy, kinetics_init, kinetics_final\n\n  ! Total number of reactions\n  integer, parameter, public :: number_of_reactions = 7\n\n  contains\n\n\nsubroutine dforce_dy(LU, rate_constant, number_density, number_density_air)\n\n  ! Compute the derivative of the Forcing w.r.t. each chemical\n  ! Also known as the Jacobian\n  real(r8), intent(out) :: LU(:)\n  real(r8), intent(in) :: rate_constant(:)\n  real(r8), intent(in) :: number_density(:)\n  real(r8), intent(in) :: number_density_air\n\n  LU(:) = 0\n\n\n  ! df_O/d(N2)\n    !  k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n    LU(6) = LU(6) + rate_constant(1) * number_density(5)\n\n\n  ! df_O1D/d(N2)\n    !  k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n    LU(5) = LU(5) - rate_constant(1) * number_density(5)\n\n\n  ! df_O/d(O)\n    !  k_O_O3_1: O + O3 -> 2*O2\n    LU(9) = LU(9) - rate_constant(3) * number_density(8)\n\n    !  k_O_O2_M_1: M, O + O2 -> 1*O3\n    LU(9) = LU(9) - rate_constant(4) * number_density(7) * number_density_air\n\n\n  ! df_O2/d(O)\n    !  k_O_O3_1: O + O3 -> 2*O2\n    LU(10) = LU(10) + 2*rate_constant(3) * number_density(8)\n\n    !  k_O_O2_M_1: M, O + O2 -> 1*O3\n    LU(10) = LU(10) - rate_constant(4) * number_density(7) * number_density_air\n\n\n  ! df_O3/d(O)\n    !  k_O_O3_1: O + O3 -> 2*O2\n    LU(11) = LU(11) - rate_constant(3) * number_density(8)\n\n    !  k_O_O2_M_1: M, O + O2 -> 1*O3\n    LU(11) = LU(11) + rate_constant(4) * number_density(7) * number_density_air\n\n\n  ! df_O/d(O1D)\n    !  k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n    LU(8) = LU(8) + rate_constant(1) * number_density(4)\n\n    !  k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n    LU(8) = LU(8) + rate_constant(2) * number_density(7)\n\n\n  ! df_O1D/d(O1D)\n    !  k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n    LU(7) = LU(7) - rate_constant(1) * number_density(4)\n\n    !  k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n    LU(7) = LU(7) - rate_constant(2) * number_density(7)\n\n\n  ! df_O/d(O2)\n    !  k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n    LU(13) = LU(13) + rate_constant(2) * number_density(5)\n\n    !  k_O_O2_M_1: M, O + O2 -> 1*O3\n    LU(13) = LU(13) - rate_constant(4) * number_density(6) * number_density_air\n\n    !  j_O2_1: O2 -> 2*O\n    LU(13) = LU(13) + 2*rate_constant(5)\n\n\n  ! df_O1D/d(O2)\n    !  k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n    LU(12) = LU(12) - rate_constant(2) * number_density(5)\n\n\n  ! df_O2/d(O2)\n    !  k_O_O2_M_1: M, O + O2 -> 1*O3\n    LU(14) = LU(14) - rate_constant(4) * number_density(6) * number_density_air\n\n    !  j_O2_1: O2 -> 2*O\n    LU(14) = LU(14) - rate_constant(5)\n\n\n  ! df_O3/d(O2)\n    !  k_O_O2_M_1: M, O + O2 -> 1*O3\n    LU(15) = LU(15) + rate_constant(4) * number_density(6) * number_density_air\n\n\n  ! df_O/d(O3)\n    !  k_O_O3_1: O + O3 -> 2*O2\n    LU(17) = LU(17) - rate_constant(3) * number_density(6)\n\n    !  j_O3_2: O3 -> 1*O + 1*O2\n    LU(17) = LU(17) + rate_constant(7)\n\n\n  ! df_O1D/d(O3)\n    !  j_O3_1: O3 -> 1*O1D + 1*O2\n    LU(16) = LU(16) + rate_constant(6)\n\n\n  ! df_O2/d(O3)\n    !  k_O_O3_1: O + O3 -> 2*O2\n    LU(18) = LU(18) + 2*rate_constant(3) * number_density(6)\n\n    !  j_O3_1: O3 -> 1*O1D + 1*O2\n    LU(18) = LU(18) + rate_constant(6)\n\n    !  j_O3_2: O3 -> 1*O + 1*O2\n    LU(18) = LU(18) + rate_constant(7)\n\n\n  ! df_O3/d(O3)\n    !  k_O_O3_1: O + O3 -> 2*O2\n    LU(19) = LU(19) - rate_constant(3) * number_density(6)\n\n    !  j_O3_1: O3 -> 1*O1D + 1*O2\n    LU(19) = LU(19) - rate_constant(6)\n\n    !  j_O3_2: O3 -> 1*O + 1*O2\n    LU(19) = LU(19) - rate_constant(7)\n\nend subroutine dforce_dy\n\nsubroutine kinetics_init(vmr, number_density, number_density_air)\n\n real(r8), intent(in) :: vmr(:)\n real(r8), intent(out):: number_density(8)\n real(r8), intent(in) :: number_density_air\n\n\n number_density(1) = vmr(1) * number_density_air ! Ar\n number_density(2) = vmr(2) * number_density_air ! CO2\n number_density(3) = vmr(3) * number_density_air ! H2O\n number_density(4) = vmr(4) * number_density_air ! N2\n number_density(6) = vmr(5) * number_density_air ! O1D\n number_density(5) = vmr(6) * number_density_air ! O\n number_density(7) = vmr(7) * number_density_air ! O2\n number_density(8) = vmr(8) * number_density_air ! O3\n\nend subroutine kinetics_init\n\n\nsubroutine kinetics_final(vmr, number_density, number_density_air)\n\n real(r8), intent(out) :: vmr(:)\n real(r8), intent(in) :: number_density(8)\n real(r8), intent(in) :: number_density_air\n\n\n vmr(1) = number_density(1) / number_density_air ! Ar\n vmr(2) = number_density(2) / number_density_air ! CO2\n vmr(3) = number_density(3) / number_density_air ! H2O\n vmr(4) = number_density(4) / number_density_air ! N2\n vmr(5) = number_density(6) / number_density_air ! O1D\n vmr(6) = number_density(5) / number_density_air ! O\n vmr(7) = number_density(7) / number_density_air ! O2\n vmr(8) = number_density(8) / number_density_air ! O3\n\nend subroutine kinetics_final\n\n\nsubroutine factored_alpha_minus_jac(LU, alpha, dforce_dy)\n  !compute LU decomposition of [alpha * I - dforce_dy]\n\n  real(r8), intent(in) :: dforce_dy(:)\n  real(r8), intent(in) :: alpha\n  real(r8), intent(out) :: LU(:)\n\n  LU(:) = -dforce_dy(:)\n\n! add alpha to diagonal elements\n\n  LU(1) = -dforce_dy(1) + alpha \n  LU(2) = -dforce_dy(2) + alpha \n  LU(3) = -dforce_dy(3) + alpha \n  LU(4) = -dforce_dy(4) + alpha \n  LU(7) = -dforce_dy(7) + alpha \n  LU(9) = -dforce_dy(9) + alpha \n  LU(14) = -dforce_dy(14) + alpha \n  LU(19) = -dforce_dy(19) + alpha \n\n  call factor(LU) \n\nend subroutine factored_alpha_minus_jac\n\nsubroutine p_force(rate_constant, number_density, number_density_air, force)\n  ! Compute force function for all molecules\n\n  real(r8), intent(in) :: rate_constant(:)\n  real(r8), intent(in) :: number_density(:)\n  real(r8), intent(in) :: number_density_air\n  real(r8), intent(out) :: force(:)\n\n\n\n! Ar\n  force(1) = 0\n\n\n! CO2\n  force(2) = 0\n\n\n! H2O\n  force(3) = 0\n\n\n! N2\n  force(4) = 0\n\n\n! O1D\n  force(5) = 0\n\n  ! k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n  force(5) = force(5) - rate_constant(1) * number_density(4) * number_density(5)\n\n  ! k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n  force(5) = force(5) - rate_constant(2) * number_density(5) * number_density(7)\n\n  ! j_O3_1: O3 -> 1*O1D + 1*O2\n  force(5) = force(5) + rate_constant(6) * number_density(8)\n\n\n! O\n  force(6) = 0\n\n  ! k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n  force(6) = force(6) + rate_constant(1) * number_density(4) * number_density(5)\n\n  ! k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n  force(6) = force(6) + rate_constant(2) * number_density(5) * number_density(7)\n\n  ! k_O_O3_1: O + O3 -> 2*O2\n  force(6) = force(6) - rate_constant(3) * number_density(6) * number_density(8)\n\n  ! k_O_O2_M_1: M, O + O2 -> 1*O3\n  force(6) = force(6) - rate_constant(4) * number_density(6) * number_density(7) * number_density_air\n\n  ! j_O2_1: O2 -> 2*O\n  force(6) = force(6) + 2*rate_constant(5) * number_density(7)\n\n  ! j_O3_2: O3 -> 1*O + 1*O2\n  force(6) = force(6) + rate_constant(7) * number_density(8)\n\n\n! O2\n  force(7) = 0\n\n  ! k_O_O3_1: O + O3 -> 2*O2\n  force(7) = force(7) + 2*rate_constant(3) * number_density(6) * number_density(8)\n\n  ! k_O_O2_M_1: M, O + O2 -> 1*O3\n  force(7) = force(7) - rate_constant(4) * number_density(6) * number_density(7) * number_density_air\n\n  ! j_O2_1: O2 -> 2*O\n  force(7) = force(7) - rate_constant(5) * number_density(7)\n\n  ! j_O3_1: O3 -> 1*O1D + 1*O2\n  force(7) = force(7) + rate_constant(6) * number_density(8)\n\n  ! j_O3_2: O3 -> 1*O + 1*O2\n  force(7) = force(7) + rate_constant(7) * number_density(8)\n\n\n! O3\n  force(8) = 0\n\n  ! k_O_O3_1: O + O3 -> 2*O2\n  force(8) = force(8) - rate_constant(3) * number_density(6) * number_density(8)\n\n  ! k_O_O2_M_1: M, O + O2 -> 1*O3\n  force(8) = force(8) + rate_constant(4) * number_density(6) * number_density(7) * number_density_air\n\n  ! j_O3_1: O3 -> 1*O1D + 1*O2\n  force(8) = force(8) - rate_constant(6) * number_density(8)\n\n  ! j_O3_2: O3 -> 1*O + 1*O2\n  force(8) = force(8) - rate_constant(7) * number_density(8)\n\nend subroutine p_force\n\nfunction reaction_rates(rate_constant, number_density, number_density_air)\n  ! Compute reaction rates\n\n  real(r8) :: reaction_rates(number_of_reactions)\n  real(r8), intent(in) :: rate_constant(:)\n  real(r8), intent(in) :: number_density(:)\n  real(r8), intent(in) :: number_density_air\n\n  ! k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n  reaction_rates(1) = rate_constant(1) * number_density(4) * number_density(5)\n\n  ! k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n  reaction_rates(2) = rate_constant(2) * number_density(5) * number_density(7)\n\n  ! k_O_O3_1: O + O3 -> 2*O2\n  reaction_rates(3) = rate_constant(3) * number_density(6) * number_density(8)\n\n  ! k_O_O2_M_1: M, O + O2 -> 1*O3\n  reaction_rates(4) = rate_constant(4) * number_density(6) * number_density(7) * number_density_air\n\n  ! j_O2_1: O2 -> 2*O\n  reaction_rates(5) = rate_constant(5) * number_density(7)\n\n  ! j_O3_1: O3 -> 1*O1D + 1*O2\n  reaction_rates(6) = rate_constant(6) * number_density(8)\n\n  ! j_O3_2: O3 -> 1*O + 1*O2\n  reaction_rates(7) = rate_constant(7) * number_density(8)\n\nend function reaction_rates\n\n\nfunction reaction_names()\n  ! Reaction names\n\n  character(len=128) :: reaction_names(number_of_reactions)\n\n  reaction_names(1) = 'N2_O1D_1'\n  reaction_names(2) = 'O1D_O2_1'\n  reaction_names(3) = 'O_O3_1'\n  reaction_names(4) = 'O_O2_M_1'\n  reaction_names(5) = 'O2_1'\n  reaction_names(6) = 'O3_1'\n  reaction_names(7) = 'O3_2'\n\nend function reaction_names\n\n\npure subroutine dforce_dy_times_vector(dforce_dy, vector, cummulative_product)\n\n  !  Compute product of [ dforce_dy * vector ]\n  !  Commonly used to compute time-truncation errors [dforce_dy * force ]\n\n  real(r8), intent(in) :: dforce_dy(:) ! Jacobian of forcing\n  real(r8), intent(in) :: vector(:)    ! Vector ordered as the order of number density in dy\n  real(r8), intent(out) :: cummulative_product(:)  ! Product of jacobian with vector\n\n  cummulative_product(:) = 0\n\n\n  ! df_O/d(N2) * N2_temporary\n  cummulative_product(6) = cummulative_product(6) + dforce_dy(6) * vector(4)\n\n\n  ! df_O1D/d(N2) * N2_temporary\n  cummulative_product(5) = cummulative_product(5) + dforce_dy(5) * vector(4)\n\n\n  ! df_O/d(O) * O_temporary\n  cummulative_product(6) = cummulative_product(6) + dforce_dy(9) * vector(6)\n\n\n  ! df_O2/d(O) * O_temporary\n  cummulative_product(7) = cummulative_product(7) + dforce_dy(10) * vector(6)\n\n\n  ! df_O3/d(O) * O_temporary\n  cummulative_product(8) = cummulative_product(8) + dforce_dy(11) * vector(6)\n\n\n  ! df_O/d(O1D) * O1D_temporary\n  cummulative_product(6) = cummulative_product(6) + dforce_dy(8) * vector(5)\n\n\n  ! df_O1D/d(O1D) * O1D_temporary\n  cummulative_product(5) = cummulative_product(5) + dforce_dy(7) * vector(5)\n\n\n  ! df_O/d(O2) * O2_temporary\n  cummulative_product(6) = cummulative_product(6) + dforce_dy(13) * vector(7)\n\n\n  ! df_O1D/d(O2) * O2_temporary\n  cummulative_product(5) = cummulative_product(5) + dforce_dy(12) * vector(7)\n\n\n  ! df_O2/d(O2) * O2_temporary\n  cummulative_product(7) = cummulative_product(7) + dforce_dy(14) * vector(7)\n\n\n  ! df_O3/d(O2) * O2_temporary\n  cummulative_product(8) = cummulative_product(8) + dforce_dy(15) * vector(7)\n\n\n  ! df_O/d(O3) * O3_temporary\n  cummulative_product(6) = cummulative_product(6) + dforce_dy(17) * vector(8)\n\n\n  ! df_O1D/d(O3) * O3_temporary\n  cummulative_product(5) = cummulative_product(5) + dforce_dy(16) * vector(8)\n\n\n  ! df_O2/d(O3) * O3_temporary\n  cummulative_product(7) = cummulative_product(7) + dforce_dy(18) * vector(8)\n\n\n  ! df_O3/d(O3) * O3_temporary\n  cummulative_product(8) = cummulative_product(8) + dforce_dy(19) * vector(8)\n\n\nend subroutine dforce_dy_times_vector\n\nend module kinetics_utilities\n",
    "rate_constants_utility_module": "module rate_constants_utility \n\nuse ccpp_kinds, only: r8 => kind_phys \n\nuse rate_constant_functions \n\nuse environmental_state_mod \n\n! This code was generated by Preprocessor revision ce294990b2b7c0fca7ccd104c7c4edb76362549a\n! Preprocessor source https://github.com/NCAR/MechanismToCode\n\n! This code is generated from tag 272 of the mechanism, Chapman.  It is named Chapman with MICM_j\n! This tag was created on 2020-02-25 14:07:46.204967-07 by ajc and is marked as not buggy\n\n  implicit none\n\n  public :: p_rate_mapping,  k_rate_constant \n\n  contains\n\nsubroutine p_rate_mapping(tuv_rates, j_rate_const)\n    real(KIND=r8),           intent(in)  :: tuv_rates(:) ! /sec \n    real(KIND=r8),           intent(out) :: j_rate_const(:) ! /sec \n    ! 1.0 * j_O2_1: O2 -> 2*O\n    j_rate_const(1) = 1.0 * tuv_rates(1) \n\n    ! 1.0 * j_O3_1: O3 -> 1*O1D + 1*O2\n    j_rate_const(2) = 1.0 * tuv_rates(2) \n\n    ! 1.0 * j_O3_2: O3 -> 1*O + 1*O2\n    j_rate_const(3) = 1.0 * tuv_rates(3) \n\nend subroutine p_rate_mapping \n\nsubroutine k_rate_constant(k_rate_constants, number_density_air, temperature, pressure, sad, aerosol_diameter, h2ovmr, o2vmr)\n    real(KIND=r8),           intent(in)  :: temperature\n    real(KIND=r8),           intent(in)  :: pressure\n    real(KIND=r8),           intent(in)  :: sad(4)  ! aerosol surface area density \n    real(KIND=r8),           intent(in)  :: aerosol_diameter(4) ! aerosol diameter \n    real(KIND=r8),           intent(in)  :: number_density_air ! P/kT molecules/cm3 \n    real(KIND=r8),           intent(in)  :: h2ovmr, o2vmr \n    real(KIND=r8),           intent(out) :: k_rate_constants(:) ! rate constant for the each reaction\n\n    type( arrhenius_rate_param_type ) :: arrhenius_parameters \n    type( troe_rate_param_type ) :: troe_parameters \n    type( troe_low_pressure_rate_param_type ) :: troe_low_pressure_parameters \n    type( Troe_Reverse_rate_param_type ) :: Troe_Reverse_parameters \n    type( troe_chemical_activation_rate_param_type ) :: troe_chemical_activation_parameters \n    type( Simple_aerosol_heterogeneous_rate_rate_param_type ) :: Simple_aerosol_heterogeneous_rate_parameters \n    type( HET_glyoxyl_rate_param_type ) :: HET_glyoxyl_parameters \n    type( combined_CO_OH_rate_param_type ) :: combined_CO_OH_parameters \n    type( CH3COCH3_OH_rate_param_type ) :: CH3COCH3_OH_parameters \n    type( HO2_HO2_rate_param_type ) :: HO2_HO2_parameters \n    type( DMS_OH_rate_param_type ) :: DMS_OH_parameters \n    type( HNO3_OH_rate_param_type ) :: HNO3_OH_parameters \n    type( MCO3_NO2_rate_param_type ) :: MCO3_NO2_parameters \n    type( MPAN_M_rate_param_type ) :: MPAN_M_parameters \n    type( SO2_OH_rate_param_type ) :: SO2_OH_parameters \n\n    type(environmental_state_type) :: environmental_state \n\n\n    environmental_state%temperature = temperature \n    environmental_state%pressure = pressure \n    environmental_state%number_density_air = number_density_air \n    environmental_state%aerosol_surface_area_density(:) = sad(:) \n    environmental_state%aerosol_diameter(:) = aerosol_diameter(:) \n\n    environmental_state%h2ovmr = h2ovmr \n\n    environmental_state%o2_number_density = o2vmr*number_density_air \n\n    !N2_O1D_1\n    !k_N2_O1D_1: N2 + O1D -> 1*O + 1*N2\n    Arrhenius_parameters%A = 2.150000e-11\n    Arrhenius_parameters%C = -110.00\n    Arrhenius_parameters%D = 300.0\n    Arrhenius_parameters%B = 0.0\n    Arrhenius_parameters%E = 0.0\n    k_rate_constants(1) = Arrhenius(Arrhenius_parameters, environmental_state) \n\n    !O1D_O2_1\n    !k_O1D_O2_1: O1D + O2 -> 1*O + 1*O2\n    Arrhenius_parameters%A = 3.300000e-11\n    Arrhenius_parameters%C = -55.00\n    Arrhenius_parameters%D = 300.0\n    Arrhenius_parameters%B = 0.0\n    Arrhenius_parameters%E = 0.0\n    k_rate_constants(2) = Arrhenius(Arrhenius_parameters, environmental_state) \n\n    !O_O3_1\n    !k_O_O3_1: O + O3 -> 2*O2\n    Arrhenius_parameters%A = 8.000000e-12\n    Arrhenius_parameters%C = 2060.00\n    Arrhenius_parameters%D = 300.0\n    Arrhenius_parameters%B = 0.0\n    Arrhenius_parameters%E = 0.0\n    k_rate_constants(3) = Arrhenius(Arrhenius_parameters, environmental_state) \n\n    !O_O2_M_1\n    !k_O_O2_M_1: M, O + O2 -> 1*O3\n    Troe_low_pressure_parameters%A_k0 = 6.0e-34\n    Troe_low_pressure_parameters%B_k0 = 2.4\n    Troe_low_pressure_parameters%C_k0 = 0.0\n    k_rate_constants(4) = Troe_low_pressure(Troe_low_pressure_parameters, environmental_state) \n\nend subroutine k_rate_constant \n\n\nend module rate_constants_utility\n"
}
