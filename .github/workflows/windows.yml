name: Windows

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  mingw:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: windows-2019
    strategy:
      matrix:
        architecture: [x64]

    steps:
      - uses: actions/checkout@v3
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.architecture }}
          version: 12.2.0 # https://github.com/egor-tensin/setup-mingw/issues/14

      - name: Run Cmake 
        run: cmake -S . -B build -G "MinGW Makefiles"

      - name: Build
        run: cmake --build build --parallel 10

      - name: Run tests
        run: |
          cd build
          ctest -C Debug --rerun-failed --output-on-failure . --verbose

  msvc2019:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: windows-2019
    strategy:
      matrix:
        build_type: [Release]
        architecture: [Win32, x64]

    steps:
    - uses: actions/checkout@v3

    - name: Run CMake
      run: cmake -S . -B build -G "Visual Studio 16 2019" -A ${{ matrix.architecture }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel 10

    - name: Test
      run: cd build ; ctest -j 10 -C ${{ matrix.build_type }} --output-on-failure

  msvc2022:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: windows-2022
    strategy:
      matrix:
        build_type: [Release]
        architecture: [Win32, x64]

    steps:
    - uses: actions/checkout@v3
    - name: Run CMake
      run: cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.architecture }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel 10
    - name: Test
      run: cd build ; ctest -j 10 -C ${{ matrix.build_type }} --output-on-failure

  clang:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: windows-2019
    strategy:
      matrix:
        version: [11, 12, 13, 14, 15]

    steps:
      - uses: actions/checkout@v3
      - name: Install Clang
        run: curl -fsSL -o LLVM${{ matrix.version }}.exe https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.version }}.0.0/LLVM-${{ matrix.version }}.0.0-win64.exe ; 7z x LLVM${{ matrix.version }}.exe -y -o"C:/Program Files/LLVM"
      - name: Run CMake
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang++.exe" -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=Debug
      - name: Build
        run: cmake --build build --parallel 10
      - name: Test
        run: cd build ; ctest -j 10 -C Debug --exclude-regex "test-unicode" --output-on-failure

  clang-cl-11:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: windows-2019
    strategy:
      matrix:
        architecture: [Win32, x64]

    steps:
      - uses: actions/checkout@v3
      - name: Run CMake
        run: cmake -S . -B build -G "Visual Studio 16 2019" -A ${{ matrix.architecture }} -T ClangCL
      - name: Build
        run: cmake --build build --config Debug --parallel 10
      - name: Test
        run: cd build ; ctest -j 10 -C Debug --exclude-regex "test-unicode" --output-on-failure